function tiempoSinMesas() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Assignació partits");
  const data = sheet.getDataRange().getValues();
  
  const personas = {};
  const today = new Date();
  let totalAsignaciones = 0;

  console.log("=== Iniciando análisis ===");

  // Recorrer todas las filas desde la 5 (omitir encabezados complejos)
  for (let i = 4; i < data.length; i++) {
    const row = data[i];
    console.log(`Procesando fila ${i + 1}: ${row}`);

    // Buscar "Assignació" en cualquier columna (ajustado para tu estructura)
    const asignacionIndex = row.findIndex(cell => 
      cell?.toString().toLowerCase().includes("Assignació".toLowerCase())
    );

    if (asignacionIndex !== -1) {
      console.log(`\n[Fila ${i + 1}] Detectada asignación en columna ${String.fromCharCode(65 + asignacionIndex)}`);
      totalAsignaciones++;

      // Obtener fecha de la fila anterior (misma columna)
      const fechaCell = data[i - 1][asignacionIndex];
      console.log(`Fecha en la fila anterior (fila ${i}): ${fechaCell}`);

      if (!fechaCell || !isPossibleDate(fechaCell)) {
        console.error("Celda de fecha vacía o no válida, saltando fila");
        continue;
      }

      // Parsear fecha mejorado
      const fecha = parseFecha(fechaCell);
      if (!fecha || isNaN(fecha)) {
        console.error(`Fecha no válida: ${fechaCell}, saltando fila`);
        continue;
      }
      console.log(`Fecha parseada: ${fecha.toLocaleDateString('es-ES')}`);

      // Obtener nombres de la columna siguiente (+1)
      const nombresCol = asignacionIndex + 1;
      const rawNombres = row[nombresCol]?.toString() || "";
      const nombres = rawNombres
        .split(/[/,&]/)
        .map(n => n.trim())
        .filter(n => n && !n.toLowerCase().includes("federada"));

      console.log(`Nombres válidos: ${nombres.join(", ")}`);

      // Actualizar registros
      nombres.forEach(nombre => {
        if (!personas[nombre] || fecha > personas[nombre].ultimaFecha) {
          personas[nombre] = {
            ultimaFecha: fecha,
            dias: Math.floor((today - fecha) / 86400000)
          };
        }
      });
    }
  }

  console.log(`\n=== Resumen ===\nAsignaciones procesadas: ${totalAsignaciones}`);
  console.log("Registros:", personas);

  // Encontrar resultado
  let resultado = "No se encontraron asignaciones válidas";
  let maxDias = 0;
  
  for (const [nombre, datos] of Object.entries(personas)) {
    if (datos.dias > maxDias) {
      maxDias = datos.dias;
      resultado = `${nombre} (${datos.dias} días)`;
    }
  }

  // Mostrar resultados
  const resultSheet = ss.getSheetByName("Resultado") || ss.insertSheet("Resultado");
  resultSheet.clear()
    .getRange(1, 1, 2, 2)
    .setValues([
      ["Persona con más tiempo sin mesas", resultado],
      ["Total asignaciones procesadas", totalAsignaciones]
    ]);
}

function parseFecha(fechaCell) {
  const meses = {
    'gen': 0, 'enero': 0, 'feb': 1, 'febrero': 1, 'mar': 2, 'marzo': 2,
    'abr': 3, 'abril': 3, 'may': 4, 'mayo': 4, 'jun': 5, 'junio': 5,
    'jul': 6, 'julio': 6, 'ag': 7, 'agosto': 7, 'set': 8, 'sept': 8, 'septiembre': 8,
    'oct': 9, 'octubre': 9, 'nov': 10, 'noviembre': 10, 'dic': 11, 'diciembre': 11
  };

  try {
    if (!fechaCell) {
      console.error("Celda de fecha vacía, saltando");
      return null;
    }

    // Caso 1: Fecha tipo "14 de setembre"
    const match = fechaCell.toString().toLowerCase().match(/(\d{1,2}) de (\w+)/);
    if (match) {
      const dia = parseInt(match[1]);
      const mesKey = match[2].substring(0,3);
      const mes = meses[mesKey] || meses[mesKey + 'iembre']?.();
      if (mes !== undefined) return new Date(new Date().getFullYear(), mes, dia);
    }

    // Caso 2: Fechas tipo "2024-01-31"
    if (fechaCell.toString().match(/^\d{4}-\d{2}-\d{2}/)) {
      return new Date(fechaCell);
    }

    // Caso 3: Fechas tipo "18-19" (usar primer número y mes actual)
    const rangoMatch = fechaCell.toString().match(/(\d{1,2})-\d{1,2}/);
    if (rangoMatch) {
      return new Date(new Date().getFullYear(), new Date().getMonth(), parseInt(rangoMatch[1]));
    }

    return new Date(fechaCell); // Intento automático
  } catch(e) {
    console.error(`Error parseando fecha: ${fechaCell} - ${e}`);
    return null;
  }
}

function isPossibleDate(fechaCell) {
  // Define una expresión regular para identificar posibles fechas (dd de mmmm, yyyy-mm-dd, dd-mm)
  const dateRegex = /(\d{1,2} de \w+)|(\d{4}-\d{2}-\d{2})|(\d{1,2}-\d{1,2})/;
  return dateRegex.test(fechaCell.toString().toLowerCase());
}
